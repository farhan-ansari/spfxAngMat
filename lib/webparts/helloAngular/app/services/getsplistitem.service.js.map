{"version":3,"sources":["webparts/helloAngular/app/services/getsplistitem.service.ts"],"names":[],"mappings":";;;;;;;;;AACA,OAAO,cAAc,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,YAAY,EAAwB,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,WAAW,EAAE,eAAe,EAAE,MAAM,4BAA4B,CAAC;AAC1E,OAAO,EAAE,UAAU,EAAE,MAAM,2CAA2C,CAAC;AAIvE;IAIE;QACE,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;IAC1C,CAAC;IAEO,2CAAgB,GAAxB;QACE,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;YACvE,IAAM,QAAQ,GAAa;gBACzB,KAAK,EACH;oBACE,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE;iBAC5B;aACJ,CAAC;YACF,MAAM,CAAC,QAAQ,CAAC;QAClB,CAAC,CAAsB,CAAC;IAC1B,CAAC;IAEO,uCAAY,GAApB,UAAqB,QAAgB;QACnC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,IAAG,iCAA+B,QAAQ,aAAU,CAAA,EAAE,YAAY,CAAC,cAAc,CAAC,EAAE,CAAC;aAC/J,IAAI,CAAC,UAAC,QAA8B;YACnC,WAAW;YACX,MAAM,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACzB,CAAC,CAAC,CAAC;IACP,CAAC;IAEM,uCAAY,GAAnB,UAAoB,QAAgB;QAElC,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,KAAK,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACjC,CAAC;QACD,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QACrC,CAAC;IAEH,CAAC;IArCU,gBAAgB;QAD5B,UAAU,EAAE;;OACA,gBAAgB,CAuC5B;IAAD,uBAAC;CAvCD,AAuCC,IAAA;SAvCY,gBAAgB","file":"getsplistitem.service.js","sourcesContent":["import { ISPLists } from './../models/demo.model';\nimport MockHttpClient from '../../../mock/mock.client';\nimport { SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport { Injectable } from '../../../../../node_modules/@angular/core';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\n\n@Injectable()\nexport class GetSPListService {\n\n  private context: IWebPartContext;\n\n  constructor() {\n    this.context = window[\"webPartContext\"];\n  }\n\n  private _getMockListData(): Promise<ISPLists> {\n    return MockHttpClient.get(this.context.pageContext.web.absoluteUrl).then(() => {\n      const listData: ISPLists = {\n        value:\n          [\n            { title: 'T1', name: 'N1' }\n          ]\n      };\n      return listData;\n    }) as Promise<ISPLists>;\n  }\n\n  private _getListData(listName: string): Promise<ISPLists> {\n    return this.context.spHttpClient.get(this.context.pageContext.web.absoluteUrl + `/_api/web/lists/GetByTitle('${listName}')/Items`, SPHttpClient.configurations.v1)\n      .then((response: SPHttpClientResponse) => {\n        //debugger;\n        return response.json();\n      });\n  }\n\n  public GetDataAsync(listName: string): Promise<ISPLists> {\n\n    if (Environment.type === EnvironmentType.Local) {\n      return this._getMockListData();\n    }\n    else {\n      return this._getListData(listName);\n    }\n\n  }\n\n}\n"],"sourceRoot":"../../../../../../../../../src"}